using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace testing_ne1_HWDR_in_Cs
{
    public enum LayerOutputFunction
    {
        Purelin = 0,
        Tansig
    };
    struct Settings
    {
    public double xRange;
    public double xmin;
    public double yRange;
    public double ymin;
    };

    public class Neuron
    {
        public Neuron();
        public Neuron(int SumOfInputs)
        {
            m_SumOfInputs = SumOfInputs;
        }
        
        public double act(double [] Input, double [] weight, double bias ,LayerOutputFunction func)
        {
            double tmp =bias;
            for (int i = 0; i < m_SumOfInputs; i++)
                tmp +=(Input[i] * weight[i]);
            if (func == LayerOutputFunction.Tansig)
                m_output = 2 / (1 + Math.Exp(-2 * tmp)) - 1;
            else if (func == LayerOutputFunction.Purelin)
                m_output = tmp;
            
            return m_output;
        }
        public double m_output;
        private int m_SumOfInputs;
    };

    public class MAPMinMax
    {
        public MAPMinMax()
        {
            //initializing Input minmaxsettings array
            for (int i = 0; i < 9; i++)
            {
                Inminmaxsettings[i].xmin = IXmin[i];
                Inminmaxsettings[i].xRange = IXRange[i];
                Inminmaxsettings[i].ymin = IYMin;
                Inminmaxsettings[i].yRange = IYRange;
            }
            //initializing Output minmaxsettings
            Outminmaxsettings.xmin = 0.1;
            Outminmaxsettings.xRange = 0.1;
            Outminmaxsettings.ymin = -1;
            Outminmaxsettings.yRange = 2;
        }
        public double applyMinMax(double input, Settings settings)
        {
            double gain = settings.yRange / settings.xRange;
            double xmin = settings.xmin;
            if (gain == 0 || double.IsInfinity(gain) || double.IsNaN(gain))
            {
                gain = 1;
                xmin = settings.ymin;
            }
            return ((input - xmin) * gain + settings.ymin);
        }
        public double reverseMinMax(double y, Settings settings)
        {
            double gain = settings.xRange / settings.yRange;
            double xmin = settings.xmin;
            if (gain == 0 || double.IsInfinity(gain))
            {
                gain = 1;
                xmin = settings.ymin;
            }
            return ((y - settings.ymin) * gain + xmin);
        }

        public Settings[] Inminmaxsettings = new Settings[18];
        public Settings Outminmaxsettings = new Settings();

        //net Input settings
        double[] IXmin = {-0.00853817128853654,
-0.352879715107900,
-1.09974803233181,
-0.458915918624834,
-0.870022267996870,
-1.32198983165465,
-0.599214704949684,
-0.968687094638694,
-0.0595942103072264,
-1.10471548940073,
-0.851285375909893,
-1.86958318063122,
-0.901277020445241,
-0.187306502328174,
-0.635371671444124,
-0.438480862267129,
-0.631602752144571,
-0.461881779001018
};
        double[] IXRange = {0.00853817128853745,
2.03230615132072,
1.83737904368724,
1.54126162392476,
1.86077912383826,
1.77532196849023,
1.98247270124758,
1.47784947293331,
1.21735474636297,
2.05358349536708,
1.63454751180035,
2.38255353904181,
1.76464300611355,
1.16907719313197,
1.53826349107033,
1.50747687735236,
1.30892292268384,
2.18916501878321,
};
        double IYRange = 2, IYMin = -1;

    };
    public class Net
    {
        public Net()
        {
            int i;
            //initializing inputLayer Neurons
            for (i = 0; i < 20; i++)
                InputLayer[i] = new Neuron(18);
            //initializing HiddenLayer Neurons
            for (i = 0; i < 5; i++)
                HiddenLayer[i] = new Neuron(9);
            //initializing OutputLayer
            OutputLayer = new Neuron(5);
        }
        public double Calculate(double[] ins)
        {
            double[] ILay_Outputs = new double[20];
            double[] HLay_Outputs = new double[5];
            double[] inputs = new double[18];
            int i;
            ////////////////////////////////////////////////////////////////////////////////////////////
            //input correction
            for (i = 0; i < 18; i++)
                inputs[i] = MinMax.applyMinMax(ins[i], MinMax.Inminmaxsettings[i]);
            ////////////////////////////////////////////////////////////////////////////////////////////
            //inputLayer acting
            for (i = 0; i < 20; i++)
            {
                double[] weights = new double[18];
                for (int y = 0; y < 18; y++)
                    weights[y] = IW[i, y];
               ILay_Outputs[i]= InputLayer[i].act(inputs, weights, IB[i],LayerOutputFunction.Tansig);
            }
            //HiddenLayer acting
            for (i = 0; i < 5; i++)
            {
                double[] weights = new double[20];
                for (int y = 0; y < 20; y++)
                    weights[y] = HW[i, y];
                HLay_Outputs[i]=HiddenLayer[i].act(ILay_Outputs, weights, HB[i],LayerOutputFunction.Tansig);
            }
            //OutputLayer acting
            OutputLayer.act(HLay_Outputs, OW, OB,LayerOutputFunction.Purelin);
            ////////////////////////////////////////////////////////////////////////////////////////////
            //output correction
            return m_NetOutput = MinMax.reverseMinMax(OutputLayer.m_output, MinMax.Outminmaxsettings);
        }
        //variables
        Neuron[] InputLayer = new Neuron[20];
        Neuron[] HiddenLayer = new Neuron[5];
        Neuron OutputLayer = new Neuron();

        MAPMinMax MinMax=new MAPMinMax();

        public double m_NetOutput;

        //net weights and biases
        double[,] IW
            ={{0.617949653783258,0.0502859904311074,0.175147437426345,0.0811269765858443,0.375521913826956,-0.731861456912220,-0.288272742098840,0.308634144524130,-0.118897875243400,0.184654505068304,-0.741962489166735,0.163876374826568,-0.234646039733050,0.364518989396345,-1.27228554277600,-0.447358771532506,-0.870712269229538,-0.0609008793607637},
                {0.0351307686688711,-0.502581934169492,-0.224089818593034,0.0803244573323655,-0.167743233563390,0.795996739316960,-0.139740559902758,0.0823895431044575,-0.660907348790683,0.541921363899844,-0.412266930139583,-0.272949573890050,0.396918296237652,-0.222372834411106,0.315242338902521,-0.464540794369556,-0.672955659128760,0.168140084553148},
                {0.614555381803471,-0.788724035710410,-0.150344671510372,0.374800301954620,-0.769611064364715,0.691063102829293,0.196009875079208,0.627157545839374,-0.0146178790362796,0.188404188361396,-0.549427765500482,-0.275210927440301,0.422276236678927,-1.04450799358420,0.584078157110403,-0.712892258593980,0.170683601343301,-0.604093664559959},
                {-0.424787425733683,0.198219950566021,0.272126904951512,0.541174302544332,0.771938884172792,-0.499209576770308,0.376606487601228,0.488442622571887,-1.20886132511414,0.219192200472817,-0.514210625146618,0.0403778245214873,-0.224488686970619,-0.525560693185483,-0.209254485786142,0.186268040262278,-0.107714148813596,-0.637231335015140},
                {0.104162353928506,-0.0838849775183797,-0.0799156234728374,0.460826571011595,0.800187533113784,-0.978338392932057,0.231727604267938,-0.886479762270064,0.0927215108910017,0.0648215722856171,-0.721997814349658,-0.266724048918252,-0.192821324529128,-0.951239925486915,-0.672471965677988,0.991459585015030,0.463947527189174,0.262207989561067},
                {-0.346745499289122,0.539364580532574,0.428179800901349,0.762662499433647,-0.231056502641231,-0.207996753627698,-0.150253500202808,0.757557638559742,0.287382078331929,0.186744197218549,-0.203450798150760,-0.266269050403348,0.787377721888487,-0.763827615948328,-0.188285057272930,-0.894145425832963,0.298501673270406,1.55848590378688},
                {0.564576422659384,0.0360606115317027,-0.718899174243326,0.653762830555962,0.409753581967435,0.525211413558086,0.536488289433550,-0.186822988297975,-0.256213243634870,0.792913832901454,0.238592987605548,0.715824645839143,-0.363171241613668,-0.379379559463351,0.309724251651655,-0.144505443359382,0.687201470776948,-0.397807949566810},
                {0.815698898343209,0.134826298917573,0.222261480246230,0.179164289385406,0.679714601701514,-0.634821935945547,-0.374917062006913,0.175824188590237,-0.157133337705080,0.798395484054726,-1.10031523014417,0.956658993587663,-0.150584976765576,0.0473393759356014,-0.0409694605034511,-0.541752511729065,-0.134048051750411,0.0876977809790495},
                {-0.300188612613257,0.584986852901885,1.01078545074229,0.365977550065037,-0.348216192040116,-0.495569195828894,-0.754185438348385,-0.0961126293495190,-0.110876417842671,-0.173533345512518,-0.754947494687057,-0.493743186993420,0.325319857690348,-0.244381046972967,0.406405939028545,-0.474170474211151,0.455790150872022,1.18408146874305},
                {-0.442880680850020,-0.0777110130118375,-0.0907899795790825,-0.767632790129298,0.00583689792291397,0.719019976585535,0.356839868258296,-0.0695270756187384,0.861388817874713,0.231844437588151,-0.485324398402433,-0.0629989687752387,0.388365906432644,-0.517239116890703,-0.466877305831427,0.404148845911132,0.236942727240854,-1.38126817108917},
                {-0.345298908084511,0.361622130849049,-0.560062028607197,-0.354711471938189,-0.0442245724766722,-0.279701727449133,-0.768851169013657,0.176335770994540,0.541953421472951,-0.151332090528590,0.154830540424965,-0.326791240177560,0.328992728672548,0.556879931516973,-0.516348222585111,-0.271562101786283,0.304630384905974,-0.00420228622903937},
                {-0.207308093221253,0.365540191117463,0.641835743056739,-0.0649272057657711,0.134368313644136,-0.376950605741875,0.295483470858654,-0.200245109316716,0.300042258099954,0.596092075190855,-0.583094926730773,-0.624933054443049,0.115657612621824,0.473326143031147,0.491921113867188,-0.377697742749170,0.719074828985188,0.685926089636237},
                {-0.329238729890056,-0.363961323657788,-0.388918667556355,0.173314224895396,0.852913591518642,0.585483381975832,-0.420477343529247,-0.0650644278379221,0.674909964232049,-0.493463323373947,0.157952997290788,0.882144562437120,-0.356170309425759,-0.922456935704424,-0.620613472907976,0.462659714141718,0.153394364501826,0.551106831456493},
                {-0.580544396363460,-0.388649820910409,-0.217778075446290,0.322624884258681,-0.862282155472353,0.0951103109460551,-0.00597237518304404,0.114730564694555,-0.435075884511744,-0.282812213197231,-0.952455917226376,-0.733001461709343,-0.541041214635932,-0.133273952023811,-0.163962200879127,0.404648686156070,1.09058392409153,-0.690212551360422},
                {-0.584025913738889,-1.08244172749210,-0.118149581846028,0.222391772455149,0.0394980504134551,-0.677998288377152,-0.833995778482512,-0.553563612848314,-0.0178061011818766,0.240482627579352,0.423226989810972,-0.211481902515361,0.0138435186847723,-0.142230670006433,-0.579212311972004,0.404464912037135,-0.749161653293139,-1.06819951587829},
                {-0.151266477005729,0.407342427834054,0.349433120415841,0.393765100184638,-0.147547030560497,-0.0806187338662184,-0.439082877410542,-0.310629113560542,-0.606911900155897,0.738981327542133,-0.857316200310810,0.580026660676249,-0.173997902690379,1.23463548680722,0.0160234582056283,0.634180234090641,-0.146380876769776,0.330950629245440},
                {-0.782392916315839,0.659037264579043,0.342468253562258,-0.430447939708225,0.286919161010714,-0.516317841124889,1.04290103714013,0.370384559374893,0.00704628176994696,-0.353846356430391,0.605769480197056,0.179913413396587,-0.352478882831896,-0.555192899961196,0.0226285167212271,0.274022225013103,0.350322745481853,0.280361323456158},
                {-0.0976109078234528,-0.0869892308424765,0.607542167939111,0.515575739012617,0.347500423948071,-0.221697863542468,0.553279173489350,-0.439564543459294,0.391738526826553,-0.767553160054474,0.355528594404017,0.827171438880455,-0.533834259067244,0.127803011015350,-0.177286961887230,-0.123942233261401,-0.00862187257308873,-1.02303606197420},
                {-0.275624511774592,0.431875072691296,0.112068369424080,-0.566914346004422,-0.291074232720573,-0.433372320267419,0.667667232308982,-0.210624799551499,-0.244441679104145,0.656797057192337,0.499758534509042,-0.316153956764305,-0.284396185499227,0.335640898582912,-0.123575265046203,0.386068245286053,-0.881691178489540,0.485472764693497},
                {-0.0290445344804764,-0.242303149884197,-0.394381617012038,0.309488348514489,-0.00547144807904570,-0.427348390183938,0.379812195323655,-0.113063289122102,-0.146586045048923,-0.755249784081285,0.627290243953777,0.318123312047107,-0.0647441920036031,0.724283221146741,0.564425450665101,0.396444966804326,0.801237317691811,-0.265282266784866}};
       
        double[,] HW = {{-0.181269650885125,-0.187973155666870,-0.152563560494019,-0.0992522932655746,-0.0241538802543432,-0.285658208580309,0.783816610323582,0.382760411994254,-0.0875336142248464,-0.0687857019296119,0.416900873706943,0.509719947721945,-0.371680617078103,-0.440655706819241,0.620777304478964,-0.878703620154802,0.284164541861774,0.385400795503388,-0.0322623102584004,0.182870748819647},
                {0.291808298285145,-0.521640559107193,-0.251906097686473,-0.0909434115414764,0.127117154271473,0.392042268302925,-0.329833417947879,0.162712412993523,0.229226064925229,0.534053239206158,0.444151417651945,-0.237040124595224,-0.141154064110515,0.0277682381065853,-0.486895557241822,0.478427763042332,0.170147143913819,-0.754380045082931,-0.436306470648219,0.408315887110896},
                {-0.125331020889139,-0.585631081470314,0.622212037073157,0.892517707736171,0.390693196199603,-0.747558126231077,-0.197621462379082,-0.204888535040996,0.369374476775028,-0.223572454262688,0.212216394876432,0.290817770849471,-0.184854616556752,0.00453830078176801,0.0964688201298823,-0.414972383676397,0.209140121734368,-0.298966894232009,-0.183277615925311,0.333857155369941},
                {0.975363428610278,-0.647619596764928,0.434467204842245,0.665998139773144,-0.387239295358985,0.610621916781844,0.524294128959484,-0.286496919464909,0.605208174260154,0.520058271069911,0.620343327317680,0.00124648402004878,-0.618771025850302,-0.380839872868776,-0.571103198777216,-0.972441971188909,-0.556934979353120,-0.00815723498524267,-0.761120050141474,0.449718596508473},
                {-0.444111297661702,-0.00344335325605931,0.964825576191447,0.668542435445301,-1.06885458291217,0.0495345438030648,0.231040644058351,0.158314576055272,-0.679530171549321,-0.153863247739061,-0.607045475304219,-0.163288734430708,0.274843300748011,0.106615905231286,0.221962975480085,-1.24649118604181,-0.964664328796708,-0.980463035097424,0.189668200400101,0.486644074699777}};
       
        double[] OW = { 0.000841280677272373, 0.00292343865105980, -0.00800936547047361, -0.000214146378201808, 0.987029394349728 };

        double[] IB = { -1.43738337350523, 1.83898103804300, -1.64945642294049, 0.902498143664223, -0.777265022632889, 0.969310709161492, 0.208943230022523, -0.0978291733304490, -0.0640227871025957, -0.0510151191354662, -0.00133066675812934, -0.461397380189346, 0.800190167340730, -0.704364410903946, -0.705430123954333, 0.499521232559811, -0.922685437582505, 1.27613892140485, -1.42334216410165, -1.80691387910509 };
        double[] HB = { 1.53832884753998, -1.20239005747677, -0.173896324488503, 1.15003625880345, -1.73832023324553 };
        double OB = -0.0149205482808910;
    }
}
